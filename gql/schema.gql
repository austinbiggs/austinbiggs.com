schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

# Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

# mutation root
type mutation_root {
  # delete data from the table: "page"
  delete_page(
    # filter the rows which have to be deleted
    where: page_bool_exp!
  ): page_mutation_response

  # delete single row from the table: "page"
  delete_page_by_pk(id: Int!): page

  # insert data into the table: "page"
  insert_page(
    # the rows to be inserted
    objects: [page_insert_input!]!

    # on conflict condition
    on_conflict: page_on_conflict
  ): page_mutation_response

  # insert a single row into the table: "page"
  insert_page_one(
    # the row to be inserted
    object: page_insert_input!

    # on conflict condition
    on_conflict: page_on_conflict
  ): page

  # update data of the table: "page"
  update_page(
    # increments the numeric columns with given value of the filtered values
    _inc: page_inc_input

    # sets the columns of the filtered rows to the given values
    _set: page_set_input

    # filter the rows which have to be updated
    where: page_bool_exp!
  ): page_mutation_response

  # update single row of the table: "page"
  update_page_by_pk(
    # increments the numeric columns with given value of the filtered values
    _inc: page_inc_input

    # sets the columns of the filtered rows to the given values
    _set: page_set_input
    pk_columns: page_pk_columns_input!
  ): page
}

# column ordering options
enum order_by {
  # in ascending order, nulls last
  asc

  # in ascending order, nulls first
  asc_nulls_first

  # in ascending order, nulls last
  asc_nulls_last

  # in descending order, nulls first
  desc

  # in descending order, nulls first
  desc_nulls_first

  # in descending order, nulls last
  desc_nulls_last
}

# columns and relationships of "page"
type page {
  created_at: timestamptz!
  id: Int!
  slug: String!
  title: String!
  updated_at: timestamptz!
}

# aggregated selection of "page"
type page_aggregate {
  aggregate: page_aggregate_fields
  nodes: [page!]!
}

# aggregate fields of "page"
type page_aggregate_fields {
  avg: page_avg_fields
  count(columns: [page_select_column!], distinct: Boolean): Int!
  max: page_max_fields
  min: page_min_fields
  stddev: page_stddev_fields
  stddev_pop: page_stddev_pop_fields
  stddev_samp: page_stddev_samp_fields
  sum: page_sum_fields
  var_pop: page_var_pop_fields
  var_samp: page_var_samp_fields
  variance: page_variance_fields
}

# aggregate avg on columns
type page_avg_fields {
  id: Float
}

# Boolean expression to filter rows from the table "page". All fields are combined with a logical 'AND'.
input page_bool_exp {
  _and: [page_bool_exp!]
  _not: page_bool_exp
  _or: [page_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: Int_comparison_exp
  slug: String_comparison_exp
  title: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

# unique or primary key constraints on table "page"
enum page_constraint {
  # unique or primary key constraint
  page_pkey

  # unique or primary key constraint
  page_slug_key
}

# input type for incrementing numeric columns in table "page"
input page_inc_input {
  id: Int
}

# input type for inserting data into table "page"
input page_insert_input {
  created_at: timestamptz
  id: Int
  slug: String
  title: String
  updated_at: timestamptz
}

# aggregate max on columns
type page_max_fields {
  created_at: timestamptz
  id: Int
  slug: String
  title: String
  updated_at: timestamptz
}

# aggregate min on columns
type page_min_fields {
  created_at: timestamptz
  id: Int
  slug: String
  title: String
  updated_at: timestamptz
}

# response of any mutation on the table "page"
type page_mutation_response {
  # number of rows affected by the mutation
  affected_rows: Int!

  # data from the rows affected by the mutation
  returning: [page!]!
}

# on conflict condition type for table "page"
input page_on_conflict {
  constraint: page_constraint!
  update_columns: [page_update_column!]! = []
  where: page_bool_exp
}

# Ordering options when selecting data from "page".
input page_order_by {
  created_at: order_by
  id: order_by
  slug: order_by
  title: order_by
  updated_at: order_by
}

# primary key columns input for table: page
input page_pk_columns_input {
  id: Int!
}

# select columns of table "page"
enum page_select_column {
  # column name
  created_at

  # column name
  id

  # column name
  slug

  # column name
  title

  # column name
  updated_at
}

# input type for updating data in table "page"
input page_set_input {
  created_at: timestamptz
  id: Int
  slug: String
  title: String
  updated_at: timestamptz
}

# aggregate stddev on columns
type page_stddev_fields {
  id: Float
}

# aggregate stddev_pop on columns
type page_stddev_pop_fields {
  id: Float
}

# aggregate stddev_samp on columns
type page_stddev_samp_fields {
  id: Float
}

# aggregate sum on columns
type page_sum_fields {
  id: Int
}

# update columns of table "page"
enum page_update_column {
  # column name
  created_at

  # column name
  id

  # column name
  slug

  # column name
  title

  # column name
  updated_at
}

# aggregate var_pop on columns
type page_var_pop_fields {
  id: Float
}

# aggregate var_samp on columns
type page_var_samp_fields {
  id: Float
}

# aggregate variance on columns
type page_variance_fields {
  id: Float
}

type query_root {
  # fetch data from the table: "page"
  page(
    # distinct select on columns
    distinct_on: [page_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [page_order_by!]

    # filter the rows returned
    where: page_bool_exp
  ): [page!]!

  # fetch aggregated fields from the table: "page"
  page_aggregate(
    # distinct select on columns
    distinct_on: [page_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [page_order_by!]

    # filter the rows returned
    where: page_bool_exp
  ): page_aggregate!

  # fetch data from the table: "page" using primary key columns
  page_by_pk(id: Int!): page
}

# Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  # does the column match the given case-insensitive pattern
  _ilike: String
  _in: [String!]

  # does the column match the given POSIX regular expression, case insensitive
  _iregex: String
  _is_null: Boolean

  # does the column match the given pattern
  _like: String
  _lt: String
  _lte: String
  _neq: String

  # does the column NOT match the given case-insensitive pattern
  _nilike: String
  _nin: [String!]

  # does the column NOT match the given POSIX regular expression, case insensitive
  _niregex: String

  # does the column NOT match the given pattern
  _nlike: String

  # does the column NOT match the given POSIX regular expression, case sensitive
  _nregex: String

  # does the column NOT match the given SQL regular expression
  _nsimilar: String

  # does the column match the given POSIX regular expression, case sensitive
  _regex: String

  # does the column match the given SQL regular expression
  _similar: String
}

type subscription_root {
  # fetch data from the table: "page"
  page(
    # distinct select on columns
    distinct_on: [page_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [page_order_by!]

    # filter the rows returned
    where: page_bool_exp
  ): [page!]!

  # fetch aggregated fields from the table: "page"
  page_aggregate(
    # distinct select on columns
    distinct_on: [page_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [page_order_by!]

    # filter the rows returned
    where: page_bool_exp
  ): page_aggregate!

  # fetch data from the table: "page" using primary key columns
  page_by_pk(id: Int!): page
}

scalar timestamptz

# Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

