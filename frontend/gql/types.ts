/* eslint-disable */
// @generated by graphql-codegen
// This file was automatically generated and should not be edited.
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> &
  { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> &
  { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  timestamptz: any;
};

export type Int_Comparison_Exp = {
  _eq?: Maybe<Scalars["Int"]>;
  _gt?: Maybe<Scalars["Int"]>;
  _gte?: Maybe<Scalars["Int"]>;
  _in?: Maybe<Array<Scalars["Int"]>>;
  _is_null?: Maybe<Scalars["Boolean"]>;
  _lt?: Maybe<Scalars["Int"]>;
  _lte?: Maybe<Scalars["Int"]>;
  _neq?: Maybe<Scalars["Int"]>;
  _nin?: Maybe<Array<Scalars["Int"]>>;
};

export type Mutation_Root = {
  __typename?: "mutation_root";
  delete_page?: Maybe<Page_Mutation_Response>;
  delete_page_by_pk?: Maybe<Page>;
  insert_page?: Maybe<Page_Mutation_Response>;
  insert_page_one?: Maybe<Page>;
  update_page?: Maybe<Page_Mutation_Response>;
  update_page_by_pk?: Maybe<Page>;
};

export type Mutation_RootDelete_PageArgs = {
  where: Page_Bool_Exp;
};

export type Mutation_RootDelete_Page_By_PkArgs = {
  id: Scalars["Int"];
};

export type Mutation_RootInsert_PageArgs = {
  objects: Array<Page_Insert_Input>;
  on_conflict?: Maybe<Page_On_Conflict>;
};

export type Mutation_RootInsert_Page_OneArgs = {
  object: Page_Insert_Input;
  on_conflict?: Maybe<Page_On_Conflict>;
};

export type Mutation_RootUpdate_PageArgs = {
  _inc?: Maybe<Page_Inc_Input>;
  _set?: Maybe<Page_Set_Input>;
  where: Page_Bool_Exp;
};

export type Mutation_RootUpdate_Page_By_PkArgs = {
  _inc?: Maybe<Page_Inc_Input>;
  _set?: Maybe<Page_Set_Input>;
  pk_columns: Page_Pk_Columns_Input;
};

export enum Order_By {
  Asc = "asc",
  AscNullsFirst = "asc_nulls_first",
  AscNullsLast = "asc_nulls_last",
  Desc = "desc",
  DescNullsFirst = "desc_nulls_first",
  DescNullsLast = "desc_nulls_last",
}

export type Page = {
  __typename?: "page";
  created_at: Scalars["timestamptz"];
  id: Scalars["Int"];
  slug: Scalars["String"];
  title: Scalars["String"];
  updated_at: Scalars["timestamptz"];
};

export type Page_Aggregate = {
  __typename?: "page_aggregate";
  aggregate?: Maybe<Page_Aggregate_Fields>;
  nodes: Array<Page>;
};

export type Page_Aggregate_Fields = {
  __typename?: "page_aggregate_fields";
  avg?: Maybe<Page_Avg_Fields>;
  count: Scalars["Int"];
  max?: Maybe<Page_Max_Fields>;
  min?: Maybe<Page_Min_Fields>;
  stddev?: Maybe<Page_Stddev_Fields>;
  stddev_pop?: Maybe<Page_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Page_Stddev_Samp_Fields>;
  sum?: Maybe<Page_Sum_Fields>;
  var_pop?: Maybe<Page_Var_Pop_Fields>;
  var_samp?: Maybe<Page_Var_Samp_Fields>;
  variance?: Maybe<Page_Variance_Fields>;
};

export type Page_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Page_Select_Column>>;
  distinct?: Maybe<Scalars["Boolean"]>;
};

export type Page_Avg_Fields = {
  __typename?: "page_avg_fields";
  id?: Maybe<Scalars["Float"]>;
};

export type Page_Bool_Exp = {
  _and?: Maybe<Array<Page_Bool_Exp>>;
  _not?: Maybe<Page_Bool_Exp>;
  _or?: Maybe<Array<Page_Bool_Exp>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Int_Comparison_Exp>;
  slug?: Maybe<String_Comparison_Exp>;
  title?: Maybe<String_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

export enum Page_Constraint {
  PagePkey = "page_pkey",
  PageSlugKey = "page_slug_key",
}

export type Page_Inc_Input = {
  id?: Maybe<Scalars["Int"]>;
};

export type Page_Insert_Input = {
  created_at?: Maybe<Scalars["timestamptz"]>;
  id?: Maybe<Scalars["Int"]>;
  slug?: Maybe<Scalars["String"]>;
  title?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
};

export type Page_Max_Fields = {
  __typename?: "page_max_fields";
  created_at?: Maybe<Scalars["timestamptz"]>;
  id?: Maybe<Scalars["Int"]>;
  slug?: Maybe<Scalars["String"]>;
  title?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
};

export type Page_Min_Fields = {
  __typename?: "page_min_fields";
  created_at?: Maybe<Scalars["timestamptz"]>;
  id?: Maybe<Scalars["Int"]>;
  slug?: Maybe<Scalars["String"]>;
  title?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
};

export type Page_Mutation_Response = {
  __typename?: "page_mutation_response";
  affected_rows: Scalars["Int"];
  returning: Array<Page>;
};

export type Page_On_Conflict = {
  constraint: Page_Constraint;
  update_columns?: Array<Page_Update_Column>;
  where?: Maybe<Page_Bool_Exp>;
};

export type Page_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  slug?: Maybe<Order_By>;
  title?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

export type Page_Pk_Columns_Input = {
  id: Scalars["Int"];
};

export enum Page_Select_Column {
  CreatedAt = "created_at",
  Id = "id",
  Slug = "slug",
  Title = "title",
  UpdatedAt = "updated_at",
}

export type Page_Set_Input = {
  created_at?: Maybe<Scalars["timestamptz"]>;
  id?: Maybe<Scalars["Int"]>;
  slug?: Maybe<Scalars["String"]>;
  title?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
};

export type Page_Stddev_Fields = {
  __typename?: "page_stddev_fields";
  id?: Maybe<Scalars["Float"]>;
};

export type Page_Stddev_Pop_Fields = {
  __typename?: "page_stddev_pop_fields";
  id?: Maybe<Scalars["Float"]>;
};

export type Page_Stddev_Samp_Fields = {
  __typename?: "page_stddev_samp_fields";
  id?: Maybe<Scalars["Float"]>;
};

export type Page_Sum_Fields = {
  __typename?: "page_sum_fields";
  id?: Maybe<Scalars["Int"]>;
};

export enum Page_Update_Column {
  CreatedAt = "created_at",
  Id = "id",
  Slug = "slug",
  Title = "title",
  UpdatedAt = "updated_at",
}

export type Page_Var_Pop_Fields = {
  __typename?: "page_var_pop_fields";
  id?: Maybe<Scalars["Float"]>;
};

export type Page_Var_Samp_Fields = {
  __typename?: "page_var_samp_fields";
  id?: Maybe<Scalars["Float"]>;
};

export type Page_Variance_Fields = {
  __typename?: "page_variance_fields";
  id?: Maybe<Scalars["Float"]>;
};

export type Query_Root = {
  __typename?: "query_root";
  page: Array<Page>;
  page_aggregate: Page_Aggregate;
  page_by_pk?: Maybe<Page>;
};

export type Query_RootPageArgs = {
  distinct_on?: Maybe<Array<Page_Select_Column>>;
  limit?: Maybe<Scalars["Int"]>;
  offset?: Maybe<Scalars["Int"]>;
  order_by?: Maybe<Array<Page_Order_By>>;
  where?: Maybe<Page_Bool_Exp>;
};

export type Query_RootPage_AggregateArgs = {
  distinct_on?: Maybe<Array<Page_Select_Column>>;
  limit?: Maybe<Scalars["Int"]>;
  offset?: Maybe<Scalars["Int"]>;
  order_by?: Maybe<Array<Page_Order_By>>;
  where?: Maybe<Page_Bool_Exp>;
};

export type Query_RootPage_By_PkArgs = {
  id: Scalars["Int"];
};

export type String_Comparison_Exp = {
  _eq?: Maybe<Scalars["String"]>;
  _gt?: Maybe<Scalars["String"]>;
  _gte?: Maybe<Scalars["String"]>;
  _ilike?: Maybe<Scalars["String"]>;
  _in?: Maybe<Array<Scalars["String"]>>;
  _iregex?: Maybe<Scalars["String"]>;
  _is_null?: Maybe<Scalars["Boolean"]>;
  _like?: Maybe<Scalars["String"]>;
  _lt?: Maybe<Scalars["String"]>;
  _lte?: Maybe<Scalars["String"]>;
  _neq?: Maybe<Scalars["String"]>;
  _nilike?: Maybe<Scalars["String"]>;
  _nin?: Maybe<Array<Scalars["String"]>>;
  _niregex?: Maybe<Scalars["String"]>;
  _nlike?: Maybe<Scalars["String"]>;
  _nregex?: Maybe<Scalars["String"]>;
  _nsimilar?: Maybe<Scalars["String"]>;
  _regex?: Maybe<Scalars["String"]>;
  _similar?: Maybe<Scalars["String"]>;
};

export type Subscription_Root = {
  __typename?: "subscription_root";
  page: Array<Page>;
  page_aggregate: Page_Aggregate;
  page_by_pk?: Maybe<Page>;
};

export type Subscription_RootPageArgs = {
  distinct_on?: Maybe<Array<Page_Select_Column>>;
  limit?: Maybe<Scalars["Int"]>;
  offset?: Maybe<Scalars["Int"]>;
  order_by?: Maybe<Array<Page_Order_By>>;
  where?: Maybe<Page_Bool_Exp>;
};

export type Subscription_RootPage_AggregateArgs = {
  distinct_on?: Maybe<Array<Page_Select_Column>>;
  limit?: Maybe<Scalars["Int"]>;
  offset?: Maybe<Scalars["Int"]>;
  order_by?: Maybe<Array<Page_Order_By>>;
  where?: Maybe<Page_Bool_Exp>;
};

export type Subscription_RootPage_By_PkArgs = {
  id: Scalars["Int"];
};

export type Timestamptz_Comparison_Exp = {
  _eq?: Maybe<Scalars["timestamptz"]>;
  _gt?: Maybe<Scalars["timestamptz"]>;
  _gte?: Maybe<Scalars["timestamptz"]>;
  _in?: Maybe<Array<Scalars["timestamptz"]>>;
  _is_null?: Maybe<Scalars["Boolean"]>;
  _lt?: Maybe<Scalars["timestamptz"]>;
  _lte?: Maybe<Scalars["timestamptz"]>;
  _neq?: Maybe<Scalars["timestamptz"]>;
  _nin?: Maybe<Array<Scalars["timestamptz"]>>;
};
