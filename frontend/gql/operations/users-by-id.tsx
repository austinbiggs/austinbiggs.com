/* eslint-disable */
// @generated by graphql-codegen
// This file was automatically generated and should not be edited.
import * as Types from "../types";

import { gql } from "@apollo/client";
import * as Apollo from "@apollo/client";
const defaultOptions = {};
export type CandidateMatchesQueryVariables = Types.Exact<{
  id: Types.Scalars["Int"];
}>;

export type CandidateMatchesQuery = { __typename?: "query_root" } & {
  users_by_pk?: Types.Maybe<
    { __typename?: "users" } & Pick<
      Types.Users,
      "id" | "firstName" | "lastName"
    >
  >;
};

export const CandidateMatchesDocument = gql`
  query CandidateMatches($id: Int!) {
    users_by_pk(id: $id) {
      id
      firstName
      lastName
    }
  }
`;

/**
 * __useCandidateMatchesQuery__
 *
 * To run a query within a React component, call `useCandidateMatchesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCandidateMatchesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCandidateMatchesQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useCandidateMatchesQuery(
  baseOptions: Apollo.QueryHookOptions<
    CandidateMatchesQuery,
    CandidateMatchesQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<CandidateMatchesQuery, CandidateMatchesQueryVariables>(
    CandidateMatchesDocument,
    options
  );
}
export function useCandidateMatchesLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    CandidateMatchesQuery,
    CandidateMatchesQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    CandidateMatchesQuery,
    CandidateMatchesQueryVariables
  >(CandidateMatchesDocument, options);
}
export type CandidateMatchesQueryHookResult = ReturnType<
  typeof useCandidateMatchesQuery
>;
export type CandidateMatchesLazyQueryHookResult = ReturnType<
  typeof useCandidateMatchesLazyQuery
>;
export type CandidateMatchesQueryResult = Apollo.QueryResult<
  CandidateMatchesQuery,
  CandidateMatchesQueryVariables
>;
