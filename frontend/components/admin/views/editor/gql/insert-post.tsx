/* eslint-disable */
// @generated by graphql-codegen
// This file was automatically generated and should not be edited.
import * as Types from "../../../../../gql/types";

import { gql } from "@apollo/client";
import * as Apollo from "@apollo/client";
const defaultOptions = {};
export type InsertPostMutationVariables = Types.Exact<{
  content: Types.Scalars["String"];
  createdBy: Types.Scalars["Int"];
  slug: Types.Scalars["String"];
  updatedBy: Types.Scalars["Int"];
  title: Types.Scalars["String"];
  status: Types.Scalars["String"];
  summary: Types.Scalars["String"];
}>;

export type InsertPostMutation = { __typename?: "mutation_root" } & {
  insert_posts_one?: Types.Maybe<
    { __typename?: "posts" } & Pick<Types.Posts, "id" | "slug" | "title">
  >;
};

export const InsertPostDocument = gql`
  mutation InsertPost(
    $content: String!
    $createdBy: Int!
    $slug: String!
    $updatedBy: Int!
    $title: String!
    $status: String!
    $summary: String!
  ) {
    insert_posts_one(
      object: {
        content: $content
        createdBy: $createdBy
        slug: $slug
        updatedBy: $updatedBy
        title: $title
        tagIds: [1]
        topicIds: [1]
        status: $status
        summary: $summary
      }
    ) {
      id
      slug
      title
    }
  }
`;
export type InsertPostMutationFn = Apollo.MutationFunction<
  InsertPostMutation,
  InsertPostMutationVariables
>;

/**
 * __useInsertPostMutation__
 *
 * To run a mutation, you first call `useInsertPostMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useInsertPostMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [insertPostMutation, { data, loading, error }] = useInsertPostMutation({
 *   variables: {
 *      content: // value for 'content'
 *      createdBy: // value for 'createdBy'
 *      slug: // value for 'slug'
 *      updatedBy: // value for 'updatedBy'
 *      title: // value for 'title'
 *      status: // value for 'status'
 *      summary: // value for 'summary'
 *   },
 * });
 */
export function useInsertPostMutation(
  baseOptions?: Apollo.MutationHookOptions<
    InsertPostMutation,
    InsertPostMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<InsertPostMutation, InsertPostMutationVariables>(
    InsertPostDocument,
    options
  );
}
export type InsertPostMutationHookResult = ReturnType<
  typeof useInsertPostMutation
>;
export type InsertPostMutationResult =
  Apollo.MutationResult<InsertPostMutation>;
export type InsertPostMutationOptions = Apollo.BaseMutationOptions<
  InsertPostMutation,
  InsertPostMutationVariables
>;
